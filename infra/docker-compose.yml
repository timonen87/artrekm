version: '3.9'



services:

  db:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - postgresql_volume:/var/lib/postgresql/data/:rw
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5


  backend:
    restart: always
    container_name: backend
    build:
      context: ../backend
      dockerfile: Dockerfile
    entrypoint: [ "sh", "-c", "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn --bind 0.0.0.0:8000 backend.wsgi:application" ]
    depends_on:
      - db
    env_file:
      - ./.env
    volumes:
      - static_volume:/app/static/:rw
      - media_volume:/app/media/:rw
    ports:
      - "8000:8000"



  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    # ports:
    #   - '3033:3000'
    expose:
      - '8030'
    env_file:
      - ./.env
    volumes:
      - frontend_volume:/home/node/result_build/build/:rw


  nginx:
    image: nginx:latest
    restart: unless-stopped
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8030:8030"
      - "1443:443"
    volumes:
      - ./nginx/:/etc/nginx/templates:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
      - ./certbot/www/:/var/www/certbot/:rw
    # command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    depends_on:
      - frontend
    env_file:
      - ./.env

  # certbot:
  #   image: certbot/certbot
  #   restart: unless-stopped
  #   volumes:
  #     - ./certbot/conf/:/etc/letsencrypt/:rw
  #     - ./certbot/www/:/var/www/certbot/:rw
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgresql_volume:
  frontend_volume:
  certbot_certs:
  static_volume:
  media_volume:
